# Informations the cool GUI will show
[ToolInfo]
# Title=<string>                    The title FEMDAQ will show within its title-bar
# Operator=<string>                 The name of the operator is printed to the status-bar
# Description=<string>              The description is printed to the status-bar
# Comment=<string>                  This is just for you
Title=FEMDAQ
Operator=Haum
Description=HQ-Cam mit 21x21
Comment=

# Other tool-settings
[ToolSettings]
# SaveResultsGrouped=<bool>         Should each save grouped into a newly created folder (named after a timestamp)
SaveResultsGrouped=true

# Information for a auto-load sweepfile
[SweepInfo]
# StartupSweep=<string>             Can be an absolute or relative (to FEMDAQ.exe) path to a sweepfile which is the automatically loaded after the ini
StartupSweep=

# Timing-Informations
[Timing]
# Initial=<uint>                    Cycle-duration for the first/initial step when starting a measurement in [ms]
# Iterative=<uint>                  Cycle-duration for all other steps expect the first one in [ms]
# Comment=<string>                  This is just for you
Initial=6000
Iterative=6000
Comment=

# PiCam provides as drawnOver: DevXY
#  returns always 0 (no source available)
[Dev101|PiCam2]
#---------------- General settings ----------------
# Ip=<uint8>.<uint8>.<uint8>.<uint8> IP-Address or DNS-Name
#                                     Possible entries: ccdkammer, 172.20.4.237 (DNS may not work! Safest way is using the direct IP)
# Port=<uint>                        Port to connect to the pyCam-server
# User=<string>                      Username for login
# Passwd=<string>                    Corresponding userpassword for login
# PyCamPath=<string>                 Path to the rPiHQCam.py-script (error when not given!)
# Download2Dir=<string>              Temporary download-directory where the picture-archives are stored until the measurement has ended (they are moved to the savefolder afterwards)
#                                     When not given it's <FEMDAQ.exe-path>/_PiCamTemp/
# CustomName=<string>                Saved outputfile contains <string> in it's filename, otherwise the file gets a standard-filename
# Comment=<string>                   This is just for you
Ip=ccdkammer
Port=5060
User=pi
Passwd=ccdkammer
PyCam2Path=/home/pi/rPiHQCamServer2.py
TempDownloadDir=
CustomName=rPiHQCam2
Comment=PiCam2
#---------------- Common measurement settings----------------
# SensorMode=<uint>                  Mode      Resolution           Aspect Ratio     Frame rates         Video*        Image           FoV           Binning/Scaling
#                         default:    0 or 1?	 2028 × 1080          169:90           0.1-50 fps                                        Partial       2 × 2 binned
#                                     1 or 2?	 2028 × 1520          4:3              0.1-50 fps                                        Full          2 × 2 binned
#                                     2 or 3?	 4056 × 3040          4:3              0.005-10 fps                                      Full          None
#                                     3 or 4?	 1012 × 760           4:3              50.1-120 fps                                      Full          4 × 4 scaled
#                                     Video-Recording is limited is FullHD (1920x1080)
# ShutterSpeed=<uint1>,<uint2>,...   Shutterspeeds you want to capture in [µs] (separated by ':', 0 means Auto)
# PicsPerSS=<uint>                   Amount of images which are taken for one ShutterSpeed; if <uint> <= 0 -> Default = 1
# FrameRate=<double>                 FPS of the camera. FPS_max = 10.0
# AnalogGain=<double>                Analogue Gain 1.0 <= <double> <= 8.0
# Awb=<double>(, <double>)           Can be a tuple of AutoWhiteBalance-values (red, blue). Default: 1.2, 1.2
#                                     If only one <double> is given, its used for red & blue. 
# ScalerCrop=<uint1>,<uint2>,        !!! NOT FUNCTIONAL FOR RAW-STREAM WE ARE USING !!! - LibCamera already clips the image from left upper corner x=<uint1>, y=<uint2>
#            <uint3>,<uint4>                                                               with a w=<uint3> and a h=<uint4>
# BayerClipWindow=                   Server clips bayerdata to reduce handled data for DeBayer and ShrinkDebayer (s. following Options). Allowed are:
#                 <w>,<h>              - 2 values:  width,height around the image center
#     (<x1>,<y1>,)<w>,<h>              - 4 values:  width,height starting at the left upper corner coordinate x1,y1
# DeBayerClippedBayer=<uint>         Server debayers the bayer-image into uint16-rgb. <uint> = 0: Off; <uint> != 0: On 
# ShrinkDebayeredByBinPow=<uint>     Server combines <uint> times 2x2 pxls into 1 px. <uint> = 0: Deactivated; <uint> > 0: No. of combine-iterations
#                                     To do shrinking, DeBayerClippedBayer=1 is set automatically
# SaveSSLog=<uint>                   Create an additional ShutterSpeed-Logfile; <uint> = 0: No log created; <uint> != 0: Create additional log
# Compress2TarGz=<uint>              Compress the captures into a tar.gz; <uint> = 0: No; <uint> != 0: Yes
# CompressMulticore=<uint>           Compress using all cores (recommended); <uint> = 0: No; <uint> != 0: Yes               No effect when Compress2TarGz = 0
# CompressSuppressParents=<uint>     Compress suppressing the parentfolder-structure; <uint> = 0: No; <uint> != 0: Yes      No effect when Compress2TarGz = 0
ShutterSpeed=3150, 10000, 31500, 100000
PicsPerSS=3
FrameRate=10
AnalogGain=1.0
Awb=1.0, 1.0
#ScalerCrop=0,0,4056,3040   !!! NOT WORKING - see explanation above !!!
BayerClipWindow=680,240,2800,2800
DeBayerClippedBayer=0
ShrinkDebayeredByBinPow=0
SaveSSLog=1
Compress2TarGz=0
CompressMulticore=1
CompressSuppressParents=1


# FEAR16v2 provides as drawnOver: DevXY|Ch<int>|<Type>
#  where <Type> = CC (CurrentControl), CF (CurrentFlow), UD (FET VoltageDrop)
#  ATTENTION! CF and UD of the corresponding channel is not measured, the drawnOver-Value will be 0!
[Dev100|FEAR16v2]
#---------------- General settings ----------------
# ComPort=COM<uint>                 COM-Port of the device
# Baudrate=<uint>                   Communication speed of the device in [baud]
# Comment=<string>                  This is just for you
ComPort=COM4
Baudrate=115200
Comment=
#---------------- General ADC settings ----------------
# AdcNMean=<uint>                   The last <uint> measurement points gets meaned together.
# AdcMDelta=<uint>                  Delta-time bewtween ADC-Measurements in [ms]. Combined with AdcNMean you get the meaning-time, e.g.:     4 Points (NMean) * 25 ms (MDelta) = 100ms
AdcNMean=10
AdcMDelta=10
#---------------- CurrentControl ----------------
# Ch<uint>CC=<int>							Channel 0-15 is connected to headercolumn: CC<int>
Ch0CC=0
#Ch1CC=1
#Ch2CC=2
#Ch3CC=3
#---------------- CurrentFlow ----------------
# Ch<uint>CF=<int>							Channel 0-15 CurrentFlow measurement: <int> = -1 (disabled), 0 (@CycleEnd), 1 (CycleStart)
#   Hint: Unlisted Channels (no Ch<int>CF=<int> line) also disables the channel!
# Ch<uint>CFChartIdentifier=Chart<int>		Channel 0-15 plots data to Chart<int> (can have multiple entries separated by ",")
# Ch<uint>CFChartDrawnOver=<drawnOverSpec>	Channel 0-15 plots over: <drawnOver> = Time or check device-blocks for supported specifier; MUST have same or more entries as ChartIdentifier
# Ch<uint>CFChartColor=<color>				Channel 0-15 plots in color: <color> = check _ColorTable; MUST have same or more entries as ChartIdentifier
# Ch<uint>CFCustomName=<string>			Channel 0-15 contains <string> in it's saved data-filename, otherwise the file gets a standard-filename
Ch0CF=0
Ch0CFChartIdentifier=Chart3, Chart4
Ch0CFChartDrawnOver=Time, Dev7
Ch0CFChartColor=red, red
Ch0CFCustomName=
#Ch1CF=0
#Ch1CFChartIdentifier=Chart3, Chart4
#Ch1CFChartDrawnOver=Time, Dev7
#Ch1CFChartColor=green, green
#Ch1CFCustomName=
#Ch2CF=0
#Ch2CFChartIdentifier=Chart3, Chart4
#Ch2CFChartDrawnOver=Time, Dev7
#Ch2CFChartColor=blue, blue
#Ch2CFCustomName=
#Ch3CF=0
#Ch3CFChartIdentifier=Chart3, Chart4
#Ch3CFChartDrawnOver=Time, Dev7
#Ch3CFChartColor=orange, orange
#Ch3CFCustomName=
#---------------- FET VoltageDrop ----------------
# Ch<uint>UD=<int>							Channel 0-15 FET VoltageDrop measurement: <int> = -1 (disabled), 0 (@CycleEnd), 1 (CycleStart)
#   Hint: Unlisted Channels (no Ch<int>CF=<int> line) also disables the channel!
# Ch<uint>UDChartIdentifier=Chart<int>		Channel 0-15 plots data to Chart<int> (can have multiple entries separated by ",")
# Ch<uint>UDChartDrawnOver=<drawnOverSpec>	Channel 0-15 plots over: <drawnOver> = Time or check device-blocks for supported specifier; MUST have same or more entries as ChartIdentifier
# Ch<uint>UDChartColor=<color>				Channel 0-15 plots in color: <color> = check _ColorTable; MUST have same or more entries as ChartIdentifier
# Ch<uint>UDCustomName=<string>			Channel 0-15 contains <string> in it's saved data-filename, otherwise the file gets a standard-filename
Ch0UD=0
Ch0UDChartIdentifier=Chart5, Chart6
Ch0UDChartDrawnOver=Time, Dev7
Ch0UDChartColor=red, red
Ch0UDCustomName=
#Ch1UD=0
#Ch1UDChartIdentifier=Chart5, Chart6
#Ch1UDChartDrawnOver=Time, Dev7
#Ch1UDChartColor=green, green
#Ch1UDCustomName=
#Ch2UD=0
#Ch2UDChartIdentifier=Chart5, Chart6
#Ch2UDChartDrawnOver=Time, Dev7
#Ch2UDChartColor=blue, blue
#Ch2UDCustomName=
#Ch3UD=0
#Ch3UDChartIdentifier=Chart5, Chart6
#Ch3UDChartDrawnOver=Time, Dev7
#Ch3UDChartColor=orange, orange
#Ch3UDCustomName=





# KE6517B provides as drawnOver: DevXY
#  where the result is always the output-voltage
# Renamed from Dev27 -> Dev7! Replacement for FUG-MCP140!     # 6517b (27) has a damaged display, and maybe also the HV-Source is damaged (Jachym kept it at the maximum output current for a while)
# Renamed from Dev28 -> Dev7! Replacement for FUG-MCP140!
[Dev7|KE6517B]
#---------------- General settings ----------------
# GpibAddr=<uint>, <uint>, <uint>   GPIB-Adress:        GPIB-Adapter, Primary-Adress, Secondary-Adress
#                                    Possible adresses: 0,            27/28,          0
# CustomName=<string>               Saved outputfile contains <string> in it's filename, otherwise the file gets a standard-filename
# Comment=<string>                  This is just for you
GpibAddr=0, 28, 0
CustomName=ISum
Comment=Current of all tips
#---------------- SourceControl ----------------
# SourceNode=<#>                    Source is connected to headercolumn "U<#>"; -1 disables the source
# Replacement for MCP140 -> Problems with entire current when using MCP! Therefore SN=7
SourceNode=7
#---------------- Measurement ----------------
# MeasureType=<Type>                Measurement of: Volt[age], Char[ge], Resi[stance], Curr[ent]
# MeasureInstantly=<int>            Measurement @ <int> = -1 (disabled), 0 (@CycleEnd), 1 (CycleStart)
# Range=<int/double>                Range depends on <Type>;  <int> = 0 (Autorange is valid for all)
#                                                             Volt: <int> = 2, 20, 200[V]
#                                                             Curr: <double> = 20e-12 ... 20e-3 [A] (in decades!)
#                                                             For other look into the datasheet
# Nplc=<double>                     Integrationtime in NetPowerLineCycles: <double> = 0 ... 20 (* 1/50Hz) [ms]; not sure about the double and min/max value
# ZeroCheck=<bool>                  Connect measurementchannel to reference resistor: <bool> = true/false
# ZeroCorrection=<bool>             Offsetcorrection: <bool> = true/false;
MeasureType=Curr
MeasureInstantly=0
Range=200e-6
Nplc=10
ZeroCheck=false
ZeroCorrection=true
#---------------- DataPlot ----------------
# ChartIdentifier=Chart<int>        Plots data to Chart<int> (can have multiple entries separated by ",")
# ChartDrawnOver=<drawnOverSpec>    Plots over: <drawnOver> = Time or check device-blocks for supported specifier; MUST have same or more entries as ChartIdentifier
# ChartColor=<color>                Plots in color: <color> = check _ColorTable; MUST have same or more entries as ChartIdentifier
#                                                   Good visible is: black, blue, brown, Green, Orange, Plum, Red, Purple
ChartIdentifier=Chart1, Chart2
# ChartDrawnOver=Time, Dev27
ChartDrawnOver=Time, Dev7
ChartColor=darkcyan, darkcyan








## FUGMCP140 provides as drawnOver: DevXY
##  where the result is always the output-voltage
#[Dev7|FUGMCP140]
##---------------- General settings ----------------
## GpibAddr=<uint>, <uint>, <uint>   GPIB-Adress:        GPIB-Adapter, Primary-Adress, Secondary-Adress
##                                    Possible adresses: 0,            7,              0
## CustomName=<string>               Saved outputfile contains <string> in it's filename, otherwise the file gets a standard-filename
## Comment=<string>                  This is just for you
#GpibAddr=0, 7, 0
#CustomName=MCP140
#Comment=HV-Source
###---------------- SourceControl ----------------
### SourceNode=<int>                  Source is connected to headercolumn "U<int>"; -1 disables the source
### Compliance=<double>               Maximum current allowed by source: Not sure about max/min values
#SourceNode=7
#Compliance=1e-3








# Chart-Blocks
[Chart1|t-Chart ISum]
# XAxisTitle=<string>                             Title for the x-axis
# YAxisTitle=<string>                             Title for the y-axis
# XAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
# YAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
#                                                 First  <fix>: @ will fix the lower boundary given by the first  <double>
#                                                 Second <fix>: @ will fix the upper boundary given by the second <double>
#                                                 Fixing only one boundary is not possible currently! You have to fix both!
# XAxisLogBase=<uint>                             <uint> is the log-base value for the x-axis (e.g. 0 and 1 is linear)
# YAxisLogBase=<uint>                             <uint> is the log-base value for the y-axis (e.g. 0 and 1 is linear)
# ShowLegend=<bool>                               Should the chart legend plotted
XAxisTitle=Time [s]
YAxisTitle=Current [I]
XAxisBoundaries=0|0
YAxisBoundaries=@1e-10|@10e-3
XAxisLogBase=0
YAxisLogBase=10
ShowLegend=1

[Chart2|U-Chart ISum]
# XAxisTitle=<string>                             Title for the x-axis
# YAxisTitle=<string>                             Title for the y-axis
# XAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
# YAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
#                                                 First  <fix>: @ will fix the lower boundary given by the first  <double>
#                                                 Second <fix>: @ will fix the upper boundary given by the second <double>
#                                                 Fixing only one boundary is not possible currently! You have to fix both!
# XAxisLogBase=<uint>                             <uint> is the log-base value for the x-axis (e.g. 0 and 1 is linear)
# YAxisLogBase=<uint>                             <uint> is the log-base value for the y-axis (e.g. 0 and 1 is linear)
# ShowLegend=<bool>                               Should the chart legend plotted
XAxisTitle=Voltage [V]
YAxisTitle=Current [I]
XAxisBoundaries=0|0
YAxisBoundaries=@1e-10|@10e-3
XAxisLogBase=0
YAxisLogBase=10
ShowLegend=1


[Chart3|t-Chart IC (FEAR)]
# XAxisTitle=<string>                             Title for the x-axis
# YAxisTitle=<string>                             Title for the y-axis
# XAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
# YAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
#                                                 First  <fix>: @ will fix the lower boundary given by the first  <double>
#                                                 Second <fix>: @ will fix the upper boundary given by the second <double>
#                                                 Fixing only one boundary is not possible currently! You have to fix both!
# XAxisLogBase=<uint>                             <uint> is the log-base value for the x-axis (e.g. 0 and 1 is linear)
# YAxisLogBase=<uint>                             <uint> is the log-base value for the y-axis (e.g. 0 and 1 is linear)
# ShowLegend=<bool>                               Should the chart legend plotted
XAxisTitle=Time [s]
YAxisTitle=Current [I]
XAxisBoundaries=0|0
YAxisBoundaries=@1e-4|@100
XAxisLogBase=0
YAxisLogBase=10
ShowLegend=1

[Chart4|U-Chart IC (FEAR)]
# XAxisTitle=<string>                             Title for the x-axis
# YAxisTitle=<string>                             Title for the y-axis
# XAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
# YAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
#                                                 First  <fix>: @ will fix the lower boundary given by the first  <double>
#                                                 Second <fix>: @ will fix the upper boundary given by the second <double>
#                                                 Fixing only one boundary is not possible currently! You have to fix both!
# XAxisLogBase=<uint>                             <uint> is the log-base value for the x-axis (e.g. 0 and 1 is linear)
# YAxisLogBase=<uint>                             <uint> is the log-base value for the y-axis (e.g. 0 and 1 is linear)
# ShowLegend=<bool>                               Should the chart legend plotted
XAxisTitle=Voltage [V]
YAxisTitle=Current [I]
XAxisBoundaries=0|0
YAxisBoundaries=@1e-4|@100
XAxisLogBase=0
YAxisLogBase=10
ShowLegend=1



[Chart5|t-Chart UDrp (FEAR)]
# XAxisTitle=<string>                             Title for the x-axis
# YAxisTitle=<string>                             Title for the y-axis
# XAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
# YAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
#                                                 First  <fix>: @ will fix the lower boundary given by the first  <double>
#                                                 Second <fix>: @ will fix the upper boundary given by the second <double>
#                                                 Fixing only one boundary is not possible currently! You have to fix both!
# XAxisLogBase=<uint>                             <uint> is the log-base value for the x-axis (e.g. 0 and 1 is linear)
# YAxisLogBase=<uint>                             <uint> is the log-base value for the y-axis (e.g. 0 and 1 is linear)
# ShowLegend=<bool>                               Should the chart legend plotted
XAxisTitle=Time [s]
YAxisTitle=Current [I]
XAxisBoundaries=0|0
YAxisBoundaries=@-100|@1600
XAxisLogBase=0
YAxisLogBase=0
ShowLegend=1


[Chart6|U-Chart UDrp (FEAR)]
# XAxisTitle=<string>                             Title for the x-axis
# YAxisTitle=<string>                             Title for the y-axis
# XAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
# YAxisBoundaries=<fix><double>|<fix><double>     BETA-Feature
#                                                 First  <fix>: @ will fix the lower boundary given by the first  <double>
#                                                 Second <fix>: @ will fix the upper boundary given by the second <double>
#                                                 Fixing only one boundary is not possible currently! You have to fix both!
# XAxisLogBase=<uint>                             <uint> is the log-base value for the x-axis (e.g. 0 and 1 is linear)
# YAxisLogBase=<uint>                             <uint> is the log-base value for the y-axis (e.g. 0 and 1 is linear)
# ShowLegend=<bool>                               Should the chart legend plotted
XAxisTitle=Voltage [V]
YAxisTitle=Current [I]
XAxisBoundaries=0|0
YAxisBoundaries=@-100|@1600
XAxisLogBase=0
YAxisLogBase=0
ShowLegend=1



